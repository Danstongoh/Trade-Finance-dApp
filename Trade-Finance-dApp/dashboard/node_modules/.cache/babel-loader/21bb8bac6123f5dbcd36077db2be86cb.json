{"ast":null,"code":"import _slicedToArray from \"/Users/jeremylim/Documents/SMU/dashboard-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jeremylim/Documents/SMU/dashboard-eth/src/state/CounterView.js\";\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { useCounter, useBlock } from './entities'; // import { initialState, blockNo } from './counter';\n// var web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\n// var hello =0;\n\nfunction useInterval(callback, delay) {\n  var savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(function () {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      var id = setInterval(tick, delay);\n      return function () {\n        return clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n\nexport var CounterView = function CounterView() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  useInterval(function () {\n    // Your custom logic here\n    setCount(count + 1);\n    increment(1);\n    blockNo(1);\n  }, 1000);\n\n  var _useBlock = useBlock(),\n      _useBlock2 = _slicedToArray(_useBlock, 2),\n      block = _useBlock2[0],\n      blockNo = _useBlock2[1].blockNo;\n\n  var _useCounter = useCounter(),\n      _useCounter2 = _slicedToArray(_useCounter, 2),\n      counter = _useCounter2[0],\n      _useCounter2$ = _useCounter2[1],\n      increment = _useCounter2$.increment,\n      decrement = _useCounter2$.decrement;\n\n  var handleClickIncrement = useCallback(function () {\n    return increment(1);\n  }, []);\n  var handleClickDecrement = useCallback(function () {\n    return decrement(1);\n  }, []); // original \n  //   const handleClickDecrement = useCallback(() => decrement(1), []);\n  //   this.interval2 = setInterval( () => [this.getBlock(), this.getBlocks()], 10000);\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Dynamic Count\"), count), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, counter.value), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, block.value), React.createElement(\"button\", {\n    onClick: handleClickIncrement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Increment\"), React.createElement(\"button\", {\n    onClick: handleClickDecrement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Decrement\"));\n}; // async function  getBlock(){\n//     let promise = new Promise((res, rej) => {\n//         setTimeout(() => res(\"Now it's done!\"), 5000)\n//     });\n//     // wait until the promise returns us a value\n//     let result = await promise; \n//     // \"Now it's done!\"\n//     console.log(\"this\");\n//     return result\n//     }\n// async function loadPage(){\n//     let hello = await getBlock();\n//     return hello;\n// }","map":{"version":3,"sources":["/Users/jeremylim/Documents/SMU/dashboard-eth/src/state/CounterView.js"],"names":["React","useCallback","useState","useEffect","useRef","useCounter","useBlock","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","CounterView","count","setCount","increment","blockNo","block","counter","decrement","handleClickIncrement","handleClickDecrement","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,MAAjD,QAA+D,OAA/D;AAEA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,YAArC,C,CACA;AACA;AACA;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsC;AAClC,MAAMC,aAAa,GAAGN,MAAM,EAA5B,CADkC,CAGlC;;AACAD,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAJkC,CAQlC;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACd,aAASS,IAAT,GAAgB;AACdF,MAAAA,aAAa,CAACC,OAAd;AACD;;AACD,QAAIF,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAII,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOH,KAAP,CAApB;AACA,aAAO;AAAA,eAAMM,aAAa,CAACF,EAAD,CAAnB;AAAA,OAAP;AACD;AACF,GARQ,EAQN,CAACJ,KAAD,CARM,CAAT;AASD;;AAEH,OAAO,IAAMO,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,kBACLd,QAAQ,CAAC,CAAD,CADH;AAAA;AAAA,MACxBe,KADwB;AAAA,MACjBC,QADiB;;AAG9BX,EAAAA,WAAW,CAAC,YAAM;AACjB;AACAW,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACAE,IAAAA,SAAS,CAAC,CAAD,CAAT;AACAC,IAAAA,OAAO,CAAC,CAAD,CAAP;AACC,GALS,EAKP,IALO,CAAX;;AAH8B,kBAUHd,QAAQ,EAVL;AAAA;AAAA,MAUxBe,KAVwB;AAAA,MAUfD,OAVe,iBAUfA,OAVe;;AAAA,oBAWaf,UAAU,EAXvB;AAAA;AAAA,MAWxBiB,OAXwB;AAAA;AAAA,MAWbH,SAXa,iBAWbA,SAXa;AAAA,MAWFI,SAXE,iBAWFA,SAXE;;AAa/B,MAAMC,oBAAoB,GAAGvB,WAAW,CAAC;AAAA,WAAMkB,SAAS,CAAC,CAAD,CAAf;AAAA,GAAD,EAAqB,EAArB,CAAxC;AACA,MAAMM,oBAAoB,GAAGxB,WAAW,CAAC;AAAA,WAAMsB,SAAS,CAAC,CAAD,CAAf;AAAA,GAAD,EAAqB,EAArB,CAAxC,CAd+B,CAejC;AACA;AAEA;;AAEE,SAEE,0CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAL,EAA4BN,KAA5B,CADJ,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMK,OAAO,CAACI,KAAd,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAML,KAAK,CAACK,KAAZ,CAHF,EAIE;AAAQ,IAAA,OAAO,EAAEF,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJF,EAKE;AAAQ,IAAA,OAAO,EAAEC,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,CAFF;AAUD,CA9BM,C,CAgCP;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useCallback,useState, useEffect, useRef } from 'react';\n\nimport { useCounter, useBlock } from './entities';\n// import { initialState, blockNo } from './counter';\n// var web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\n// var hello =0;\n\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\nexport const CounterView = () => {\n    let [count, setCount] = useState(0);\n\n   useInterval(() => {\n    // Your custom logic here\n    setCount(count + 1);\n    increment(1);\n    blockNo(1);\n    }, 1000);\n\n  const [block, { blockNo}] = useBlock();\n  const [counter, { increment, decrement }] = useCounter();\n\n  const handleClickIncrement = useCallback(() => increment(1), []);\n  const handleClickDecrement = useCallback(() => decrement(1), []);\n// original \n//   const handleClickDecrement = useCallback(() => decrement(1), []);\n\n//   this.interval2 = setInterval( () => [this.getBlock(), this.getBlocks()], 10000);\n\n  return (\n\n    <>\n        <div><h2>Dynamic Count</h2>{count}</div>\n      <div>{counter.value}</div>\n      <div>{block.value}</div>\n      <button onClick={handleClickIncrement}>Increment</button>\n      <button onClick={handleClickDecrement}>Decrement</button>\n    </>\n  )\n};\n\n// async function  getBlock(){\n//     let promise = new Promise((res, rej) => {\n//         setTimeout(() => res(\"Now it's done!\"), 5000)\n//     });\n\n//     // wait until the promise returns us a value\n//     let result = await promise; \n  \n//     // \"Now it's done!\"\n//     console.log(\"this\");\n//     return result\n//     }\n// async function loadPage(){\n//     let hello = await getBlock();\n//     return hello;\n// }\n\n"]},"metadata":{},"sourceType":"module"}